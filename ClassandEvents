$csv = Import-CSV "C:\Medstar\Migration\ClassEvent\kkkkk.csv" -delimiter ","

$CatCollPath = "/sitecore/content/MHO/Medstar/Data/Tags/"
$Catitem = Get-ChildItem -Path $CatCollPath -Recurse

$catName =@{}
foreach($itemRendering in $Catitem ) {    
    $catName.add($itemRendering.ID,$itemRendering.Name)
}

#New-UsingBlock (New-Object Sitecore.Data.BulkUpdateContext) 
#{ 
	$counter=1
	foreach($row in $csv) 
	{	
		if($counter -le 65)
		{
			Logger("------------------------------------------------------------")
			Logger ("Started Processing for the Item =>:"+$row.id)
			
			
			$itemPath = "/sitecore/content/MHO/Medstar/Home/Classes and Events/" + ($row.'Title' -replace "[!,:,',&,;,?]")
			$itemTemplate = "/sitecore/templates/Project/MHO/kk/Classes and Events/ClassandEvents"		
			
			$item = Get-Item -Path $itemPath -ErrorAction SilentlyContinue
				
			if($item -eq $null)
			{	
				$item = New-Item -Path $itemPath -ItemType $itemTemplate
			}
			
			$item.Editing.BeginEdit()
			$item.Editing.BeginEdit()
			
			 #Parameter's are "Item", "Field Name", "Field Value"
             if($row.Title -ne $null)
            {
                HandleNormalTextField $item "Title" ($row.'Title' -replace "[!,:,',&,;,?]")
            }
      
            #Parameter's are "Item", "Field Name", "Field Value"
            HandleRichTextField $item "Description" $row.content
            #Parameter's are "Item", "Field Name", "Field Value"
            if($row.Date -ne $null)
            {
                HandleDateField $item "Date" $row.Date
            }
			#Parameter's are "Item", "Field Name", "Field Value"
            if($row.EventStartDate -ne $null)
            {
                HandleDateTimeField $item "EventStartDate" $row.EventStartDate
            }
			#Parameter's are "Item", "Field Name", "Field Value"
            if($row.EventEndDate -ne $null)
            {
                HandleDateTimeField $item "EventEndDate" $row.EventEndDate
            }
			#Parameter's are "Item", "Field Name", "Field Value"
             if($row.EventURL -ne $null)
            {
                HandleNormalTextField $item "EventUrl" $row.'EventURL'
            }
            
			#Parameter's are "Item", "Field Name", "Field Value"
			if ($row.'Event Categories' -ne $null)
			{
			HandleCategoriesField $item "Categories" $row.Event Categories
			}
			#Parameter's are "Item", "Field Name", "Field Value"
			HandleTagsField $item "Tags" $row.Tags
			#Parameter's are "Item", "Field Name", "Field Value"
			if ($row.'Author Username' -ne $null)
			{
			HandleAuthorField $item "Author" $row.'Author Username'
			}
				
			$item.Editing.EndEdit() | Out-Null	
			
			Logger ("Ended Processing for the Item =>:"+$row.id)
			$counter++
		}		
	}
Function HandleImageField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$imageUrl
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$imageTempDirectory = "C:\Import\"
		$imageSitecoreLocation = "/sitecore/media library/Project/MHO/ll/ClassandEvents/"
		
		$fileName = (Split-Path -Path $imageUrl -Leaf).Split(".")[0];
		$extension = (Split-Path -Path $imageUrl -Leaf).Split(".")[1];
		
		$imagefullLocalPath = $imageTempDirectory+$fileName+"."+$extension
		
		$wc = New-Object System.Net.WebClient
		$wc.DownloadFile($imageUrl, $imageTempDirectory+$fileName+"."+$extension)
		
		$imagePathinSitecore=$imageSitecoreLocation+$fileName
		$imageItem = Get-Item -Path $imagePathinSitecore -ErrorAction SilentlyContinue
		if($imageItem -eq $null)
		{
			New-MediaItem $imagefullLocalPath $imageSitecoreLocation
			$imageItem = Get-Item -Path $imagePathinSitecore
			$item.Image = $imageItem
			
			#Remove Image from local folder		
			Remove-Item -Path $imagefullLocalPath
		}
		else
		{	
			$item.Image = $imageItem
		}
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function HandleDateField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$csvDate = [DateTime]::ParseExact($fieldValue,"M/d/yyyy",[Globalization.cultureinfo]::GetCultureInfo("en-US"))
		$item[$fieldName] = [Sitecore.DateUtil]::ToIsoDate($csvDate)
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function HandleDateTimeField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$csvDate = [DateTime]::ParseExact($fieldValue,"M/d/yyyy H:m",[Globalization.cultureinfo]::GetCultureInfo("en-US"))
		$item[$fieldName] = [Sitecore.DateUtil]::ToIsoDate($csvDate)
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function HandleRichTextField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$item[$fieldName] = $fieldValue
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function HandleNormalTextField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$item[$fieldName] = $fieldValue
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function HandleNumberField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		$item[$fieldName] = $fieldValue
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}		
}
Function HandleExternalLinkField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$url
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		[Sitecore.Data.Fields.LinkField] $fieldValueLink = $item.Fields[$fieldName];		
		
		$fieldValueLink.text = "Dummy Text"
		$fieldValueLink.title = "Dummy Title"
		$fieldValueLink.linktype = "external"
		$fieldValueLink.url = $url
		
		$item[$fieldName] = $fieldValueLink.Value;	
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
Function Logger{
    param(
        [Parameter(Mandatory=$true)][String]$msg
    )
    
    Add-Content "C:\Import\ImportLog.log" $msg
}
function New-MediaItem{
    [CmdletBinding()]
    param(
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$filePath,

        [Parameter(Position=1, Mandatory=$true)]
        [ValidateNotNullOrEmpty()]
        [string]$mediaPath
    )

    $mco = New-Object Sitecore.Resources.Media.MediaCreatorOptions
    $mco.Database = [Sitecore.Configuration.Factory]::GetDatabase("master");
    $mco.Language = [Sitecore.Globalization.Language]::Parse("en");
    $mco.Versioned = [Sitecore.Configuration.Settings+Media]::UploadAsVersionableByDefault;
    $mco.Destination = "$($mediaPath)/$([System.IO.Path]::GetFileNameWithoutExtension($filePath))";

    $mc = New-Object Sitecore.Resources.Media.MediaCreator
    $mc.CreateFromFile($filepath, $mco);
}
Function HandleCategoriesField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)		
		
		$Catvalues = $fieldValue.Split("|")		
		
		if($Catvalues.count -gt 1)
		{		
		     $SelectedMultilistvaluesList = ""
		      foreach($Cval in $Catvalues)
		     {
		       #Parameter's are Category Values
		       $SelectedMultilistvalues = AddCategories $Cval
			   
			   if($SelectedMultilistvaluesList)
			   {
			      $SelectedMultilistvaluesList = $SelectedMultilistvaluesList + "|" + $SelectedMultilistvalues
			   }
			   else
			   {
			     $SelectedMultilistvaluesList = $SelectedMultilistvalues
			   }			   
		     }
			 $item[$fieldName] = $SelectedMultilistvaluesList
		}
		else
		{
		  #Parameter's are Category Values
		   $SelectedMultilistvalues = AddCategories $fieldValue 	
           $item[$fieldName] = $SelectedMultilistvalues		   
		}		
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
function AddCategories{
param(
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$Catvalues
    )
	
	    $CatCollPath = "/sitecore/content/MHO/Medstar/Data/Tags/Categories/"
		$CatTemplatePath = "/sitecore/templates/Foundation/Experience Accelerator/Taxonomy/Datasource/Tag"

       $NestedCategory = $Catvalues.Split(">")
		   
		   if($NestedCategory.count -gt 1)
		   {
		   
		      #$rootcat = $NestedCategory[0]
			  #$rootCatPath = $CatCollPath + $rootcat
			  $rootcat = $NestedCategory[1]
			  $PrimaryCatPath = $CatCollPath + $rootcat
			  
			  #$Catitem = Get-Item -Path $rootCatPath -ErrorAction SilentlyContinue
			  
			    # if($Catitem -eq $null)
			    #  {	
				#    $Catitem = New-Item -Path $rootCatPath -ItemType $CatTemplatePath
			    #  }
			
			    if($NestedCategory[1])
			    {
			       #$PrimaryCatPath = $rootCatPath + "/" + $NestedCategory[0] + "-" + $NestedCategory[1]
				   
				   $Primarytitem = Get-Item -Path $PrimaryCatPath -ErrorAction SilentlyContinue
			  
			      if(($Primarytitem -eq $null) -and ($catName -NotContains $NestedCategory[1]) )
			      {	
				     $Primarytitem = New-Item -Path $PrimaryCatPath -ItemType $CatTemplatePath
			      }elseif($catName -Contains $NestedCategory[1]) {
					Foreach ($Key in ($catName.GetEnumerator() | Where-Object {$_.Value -eq $NestedCategory[1]}))
							{$Primarytitem = $Key.Name}					  
				  }
				   
				   $selectedCategory = $Primarytitem.ID.ToString()
                   return $selectedCategory			
			    }					   
		   }
		   elseif(($NestedCategory.count -eq 1))
		   {
		      $rootcat = $NestedCategory
			  $rootCatPath = $CatCollPath + $rootcat
			  
			  $Catitem = Get-Item -Path $rootCatPath -ErrorAction SilentlyContinue
			  
			  if(($Catitem -eq $null) -and ($catName -NotContains $rootcat))
			{	
				$Catitem = New-Item -Path $rootCatPath -ItemType $CatTemplatePath
			}elseif($catName -Contains $rootcat) {
					Foreach ($Key in ($catName.GetEnumerator() | Where-Object {$_.Value -eq $rootcat}))
							{$Catitem = $Key.Name}					  
				  }
			
			$selectedCategory = $Catitem.ID.ToString()
			return $selectedCategory
		   }
    
}

Function HandleTagsField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		 $TagCollPath = "/sitecore/content/ll/kkk/Data/Tags/ClassandEvents/"
		 $TagTemplatePath = "/sitecore/templates/Foundation/Experience Accelerator/Taxonomy/Datasource/Tag"
		
		$Tagvalues = $fieldValue.Split("|")
		
		$TagMultilistvaluesList = ""
		
		 foreach($Tval in $Tagvalues)
		     {			 
			    $TagItemPath = $TagCollPath + $Tval
			    $Tagitem = Get-Item -Path $TagItemPath -ErrorAction SilentlyContinue
			  
			     if(($Tagitem -eq $null) -and ($catName -NotContains $Tval) )
			      {	
				    $Tagitem = New-Item -Path $TagItemPath -ItemType $TagTemplatePath
			      }elseif($catName -Contains $Tval) {
					Foreach ($Key in ($catName.GetEnumerator() | Where-Object {$_.Value -eq $Tval}))
							{$Tagitem = $Key.Name}					  
				  }
				  
				  $SelectedTagID = $Tagitem.ID.ToString()
				  
				   if($TagMultilistvaluesList)
			       {
			         $TagMultilistvaluesList = $TagMultilistvaluesList + "|" + $SelectedTagID
			        }
			       else
			       {
			         $TagMultilistvaluesList = $SelectedTagID
			        }						      
		      }
			  
			  $item[$fieldName] = $TagMultilistvaluesList
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}

Function HandleAuthorField{
	param(
        [Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[Sitecore.Data.Items.Item]$item,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldName,
		
		[Parameter (Mandatory=$true)]
		[ValidateNotNullOrEmpty ()]
		[String]$fieldValue
    )
	try
	{
		Logger("Started Processing for the field=>:"+$fieldName)
		
		 $AuthorsCollPath = "/sitecore/content/MHO/k/Data/Authors/"
		 $AuthorsTemplatePath = "/sitecore/templates/Feature/Experience Accelerator/Page Content/Text"
		
		  $AuthorItemPath = $AuthorsCollPath + $fieldValue
	      $Authoritem = Get-Item -Path $AuthorItemPath -ErrorAction SilentlyContinue
			  
			if($Authoritem -eq $null)
			{	
			 $Authoritem = New-Item -Path $AuthorItemPath -ItemType $AuthorsTemplatePath
		    }
				  
		    $AuthorID = $Authoritem.Name
			
			Write-Host(" Author Name  " + $fieldValue + " Field ID " + $AuthorID )
		
		    $item[$fieldName] = $AuthorID
		
		Logger("Success")
		Logger("Ended Processing for the field=>:"+$fieldName)
	}
	Catch
	{
		Logger("Error in Processing for the field=>:"+$fieldName)
		Logger($_.Exception.Message)
		Logger("Ended Processing for the field=>:"+$fieldName)
	}	
}
